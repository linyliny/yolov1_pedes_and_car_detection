from __future__ import print_function

import torch.nn as nn
import torch.nn.functional as F

class Yolo_tiny(nn.Module):
    def __init__(self):
        super(Yolo_tiny,self).__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size = 3, padding = 1)
        self.norm1 = nn.BatchNorm2d(16)
        self.conv2 = nn.Conv2d(16, 32, kernel_size = 3, padding = 1)
        self.norm2 = nn.BatchNorm2d(32)
        self.conv3 = nn.Conv2d(32, 64, kernel_size = 3, padding = 1)
        self.norm3 = nn.BatchNorm2d(64)
        self.conv4 = nn.Conv2d(64, 128, kernel_size = 3, padding = 1)
        self.norm4 = nn.BatchNorm2d(128)
        self.conv5 = nn.Conv2d(128, 256, kernel_size = 3, padding = 1)
        self.norm5 = nn.BatchNorm2d(256)
        self.conv6 = nn.Conv2d(256, 512, kernel_size = 3, padding = 1)
        self.norm6 = nn.BatchNorm2d(512)
        self.conv7 = nn.Conv2d(512, 1024, kernel_size = 3, padding = 1)
        self.norm7 = nn.BatchNorm2d(1024)
        self.conv8 = nn.Conv2d(1024, 256, kernel_size = 3, padding = 1)
        self.norm8 = nn.BatchNorm2d(256)
        
        self.fc1 = nn.Linear(12544, 4096)
        self.fc2 = nn.Linear(4096, 784)
        
#        self.norm1 = nn.BatchNorm2d(3)
#        self.norm1 = nn.BatchNorm2d(16)
#        self.norm2 = nn.BatchNorm2d(32)
#        self.norm3 = nn.BatchNorm2d(64)
#        self.norm4 = nn.BatchNorm2d(128)
#        self.norm5 = nn.BatchNorm2d(256)
#        self.norm6 = nn.BatchNorm2d(512)
#        self.norm7 = nn.BatchNorm2d(1024)
#        self.norm8 = nn.BatchNorm2d(256)
        
    def forward(self, x):
#        x = self.norm1(x)
        x = F.max_pool2d(F.leaky_relu(self.norm1(self.conv1(x)), negative_slope=0.1), 2)
        x = F.max_pool2d(F.leaky_relu(self.norm2(self.conv2(x)), negative_slope=0.1), 2)
        x = F.max_pool2d(F.leaky_relu(self.norm3(self.conv3(x)), negative_slope=0.1), 2)
        x = F.max_pool2d(F.leaky_relu(self.norm4(self.conv4(x)), negative_slope=0.1), 2)
        x = F.max_pool2d(F.leaky_relu(self.norm5(self.conv5(x)), negative_slope=0.1), 2)
        x = F.leaky_relu(self.norm6(self.conv6(x)), negative_slope=0.1)
        x = F.leaky_relu(self.norm7(self.conv7(x)), negative_slope=0.1)
        x = F.leaky_relu(self.norm8(self.conv8(x)), negative_slope=0.1)
#        x = self.norm9(F.leaky_relu(self.conv8(x)))
        x = x.view(-1, 12544)
        x = F.leaky_relu(self.fc1(x), negative_slope=0.1)
        x = F.dropout(x)
        x = self.fc2(x)
        
        return x

class yolo(nn.Module):
    def __init__(self):
        super(yolo,self).__init__()
        self.conv1 = nn.Conv2d(3, 64, kernel_size = 7, stride=2, padding = 3)
        self.norm1 = nn.BatchNorm2d(64)
        self.conv2 = nn.Conv2d(64, 192, kernel_size = 3, padding = 1)
        self.norm2 = nn.BatchNorm2d(192)
        self.conv3 = nn.Conv2d(192, 128, kernel_size = 1)
        self.norm3 = nn.BatchNorm2d(128)
        self.conv4 = nn.Conv2d(128, 256, kernel_size = 3, padding = 1)
        self.norm4 = nn.BatchNorm2d(256)
        self.conv5 = nn.Conv2d(256, 256, kernel_size = 1)
        self.norm5 = nn.BatchNorm2d(256)
        self.conv6 = nn.Conv2d(256, 512, kernel_size = 3, padding = 1)
        self.norm6 = nn.BatchNorm2d(512)
        self.conv7 = nn.Conv2d(512, 256, kernel_size = 1)
        self.norm7 = nn.BatchNorm2d(256)
        self.conv8 = nn.Conv2d(256, 512, kernel_size = 3, padding = 1)
        self.norm8 = nn.BatchNorm2d(512)
        self.conv9 = nn.Conv2d(512, 256, kernel_size = 1)
        self.norm9 = nn.BatchNorm2d(256)
        self.conv10 = nn.Conv2d(256, 512, kernel_size = 3, padding = 1)
        self.norm10 = nn.BatchNorm2d(512)
        self.conv11 = nn.Conv2d(512, 256, kernel_size = 1)
        self.norm11 = nn.BatchNorm2d(256)
        self.conv12 = nn.Conv2d(256, 512, kernel_size = 3, padding = 1)
        self.norm12 = nn.BatchNorm2d(512)
        self.conv13 = nn.Conv2d(512, 256, kernel_size = 1)
        self.norm13 = nn.BatchNorm2d(256)
        self.conv14 = nn.Conv2d(256, 512, kernel_size = 3, padding = 1)
        self.norm14 = nn.BatchNorm2d(512)
        self.conv15 = nn.Conv2d(512, 512, kernel_size = 1)
        self.norm15 = nn.BatchNorm2d(512)
        self.conv16 = nn.Conv2d(512, 1024, kernel_size = 3, padding = 1)
        self.norm16 = nn.BatchNorm2d(1024)
        self.conv17 = nn.Conv2d(1024, 512, kernel_size = 1)
        self.norm17 = nn.BatchNorm2d(512)
        self.conv18 = nn.Conv2d(512, 1024, kernel_size = 3, padding = 1)
        self.norm18 = nn.BatchNorm2d(1024)
        self.conv19 = nn.Conv2d(1024, 512, kernel_size = 1)
        self.norm19 = nn.BatchNorm2d(512)
        self.conv20 = nn.Conv2d(512, 1024, kernel_size = 3, padding = 1)
        self.norm20 = nn.BatchNorm2d(1024)
        self.conv21 = nn.Conv2d(1024, 1024, kernel_size = 3, padding = 1)
        self.norm21 = nn.BatchNorm2d(1024)
        self.conv22 = nn.Conv2d(1024, 1024, kernel_size = 3, stride=2, padding = 1)
        self.norm22 = nn.BatchNorm2d(1024)
        self.conv23 = nn.Conv2d(1024, 1024, kernel_size = 3, padding = 1)
        self.norm23 = nn.BatchNorm2d(1024)
        self.conv24 = nn.Conv2d(1024, 1024, kernel_size = 3, padding = 1)
        self.norm24 = nn.BatchNorm2d(1024)
        
        self.fc1 = nn.Linear(50176, 4096)
        self.fc2 = nn.Linear(4096, 784)
        
    def forward(self, x):
        x = F.leaky_relu(self.norm1(self.conv1(x)), negative_slope=0.1)
        x = F.max_pool2d(F.leaky_relu(self.norm2(self.conv2(x)), negative_slope=0.1), 2)
#        print(x)
        x = F.leaky_relu(self.norm3(self.conv3(x)), negative_slope=0.1)
        x = F.leaky_relu(self.norm4(self.conv4(x)), negative_slope=0.1)
        x = F.leaky_relu(self.norm5(self.conv5(x)), negative_slope=0.1)
        x = F.max_pool2d(self.norm6(F.leaky_relu(self.conv6(x), negative_slope=0.1)), 2)
#        print(x)
        x = self.norm7(F.leaky_relu(self.conv7(x), negative_slope=0.1))
        x = self.norm8(F.leaky_relu(self.conv8(x), negative_slope=0.1))
        x = self.norm9(F.leaky_relu(self.conv9(x), negative_slope=0.1))
        x = self.norm10(F.leaky_relu(self.conv10(x), negative_slope=0.1))
        x = self.norm11(F.leaky_relu(self.conv11(x), negative_slope=0.1))
        x = self.norm12(F.leaky_relu(self.conv12(x), negative_slope=0.1))
        x = self.norm13(F.leaky_relu(self.conv13(x), negative_slope=0.1))
        x = self.norm14(F.leaky_relu(self.conv14(x), negative_slope=0.1))
        x = self.norm15(F.leaky_relu(self.conv15(x), negative_slope=0.1))
        x = F.max_pool2d(self.norm16(F.leaky_relu(self.conv16(x), negative_slope=0.1)), 2)
#        print(x)
        x = self.norm17(F.leaky_relu(self.conv17(x), negative_slope=0.1))
        x = self.norm18(F.leaky_relu(self.conv18(x), negative_slope=0.1))
        x = self.norm19(F.leaky_relu(self.conv19(x), negative_slope=0.1))
        x = self.norm20(F.leaky_relu(self.conv20(x), negative_slope=0.1))
        x = self.norm21(F.leaky_relu(self.conv21(x), negative_slope=0.1))
        x = self.norm22(F.leaky_relu(self.conv22(x), negative_slope=0.1))
#        print(x)
        x = self.norm23(F.leaky_relu(self.conv23(x), negative_slope=0.1))
        x = self.norm24(F.leaky_relu(self.conv24(x), negative_slope=0.1))
        x = x.view(-1, 50176)
        x = F.leaky_relu(self.fc1(x), negative_slope=0.1)
        x = F.dropout2d(x)
        x = self.fc2(x)
        
        return x
    
#net = yolo()
#print(net)
